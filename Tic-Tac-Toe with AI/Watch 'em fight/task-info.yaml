type: edu
custom_name: stage3
files:
- name: src/tictactoe/Main.java
  visible: true
  text: |
    package tictactoe;

    public class Main {
        public static void main(String[] args) {
            // write your code here
        }
    }
  learner_created: false
- name: test/TicTacToeTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;
    import tictactoe.Main;

    import java.util.ArrayList;
    import java.util.List;
    import java.util.stream.Collectors;

    enum FieldState {
        X, O, FREE;

        static FieldState get(char symbol) {
            switch (symbol) {
                case 'X': return X;
                case 'O': return O;
                case ' ':
                case '_':
                    return FREE;
                default: return null;
            }
        }
    }

    class TicTacToeField {

        final FieldState[][] field;

        TicTacToeField(FieldState[][] field) {
            this.field = new FieldState[3][3];
            for (int row = 0; row < 3; row++) {
                for (int col = 0; col < 3; col++) {
                    this.field[row][col] = field[row][col];
                }
            }
        }

        TicTacToeField(String str) {
            field = new FieldState[3][3];
            str = str.replace("\"", "");

            for (int row = 0; row < 3; row++) {
                for (int col = 0; col < 3; col++) {
                    field[row][col] =
                        FieldState.get(str.charAt(((2 - row) * 3 + col)));
                }
            }
        }

        boolean equalTo(TicTacToeField other) {
            for (int i = 0; i < 3; i++) {
                for (int j = 0; j < 3; j++) {
                    if (field[i][j] != other.field[i][j]) {
                        return false;
                    }
                }
            }
            return true;
        }

        boolean hasNextAs(TicTacToeField other) {
            boolean improved = false;
            for (int i = 0; i < 3; i++) {
                for (int j = 0; j < 3; j++) {
                    if (field[i][j] != other.field[i][j]) {
                        if (field[i][j] == FieldState.FREE && !improved) {
                            improved = true;
                        }
                        else {
                            return false;
                        }
                    }
                }
            }
            return improved;
        }

        boolean isCloseTo(TicTacToeField other) {
            return equalTo(other)
                || hasNextAs(other)
                || other.hasNextAs(this);
        }

        static TicTacToeField parse(String fieldStr) {

            try {
                List<String> lines = fieldStr
                    .lines()
                    .map(String::strip)
                    .filter(e ->
                        e.startsWith("|")
                            && e.endsWith("|"))
                    .collect(Collectors.toList());

                for (String line : lines) {
                    if (line.length() != 9) {
                        throw new WrongAnswer("Line of Tic-Tac-Toe " +
                            "field should be 9 characters long\n" +
                            "found " + line.length() + " characters in \"" + line + "\"");
                    }
                    for (char c : line.toCharArray()) {
                        if (c != 'X'
                            && c != 'O'
                            && c != '|'
                            && c != ' '
                            && c != '_') {
                            return null;
                        }
                    }
                }

                FieldState[][] field = new FieldState[3][3];

                int y = 2;
                for (String line : lines) {
                    char[] cols = new char[] {
                        line.charAt(2),
                        line.charAt(4),
                        line.charAt(6)
                    };

                    int x = 0;
                    for (char c : cols) {
                        FieldState state = FieldState.get(c);
                        if (state == null) {
                            return null;
                        }
                        field[y][x] = state;
                        x++;
                    }
                    y--;
                }

                return new TicTacToeField(field);
            } catch (Exception ex) {
                return null;
            }
        }


        static List<TicTacToeField> parseAll(String output) {
            List<TicTacToeField> fields = new ArrayList<>();

            List<String> lines = output
                .lines()
                .map(String::strip)
                .filter(e -> e.length() > 0)
                .collect(Collectors.toList());

            String candidateField = "";
            boolean insideField = false;
            for (String line : lines) {
                if (line.contains("----") && !insideField) {
                    insideField = true;
                    candidateField = "";
                } else if (line.contains("----") && insideField) {
                    TicTacToeField field = TicTacToeField.parse(candidateField);
                    if (field != null) {
                        fields.add(field);
                    }
                    insideField = false;
                }

                if (insideField && line.startsWith("|")) {
                    candidateField += line + "\n";
                }
            }

            return fields;
        }

    }


    class Clue {
        int x, y;
        Clue(int x, int y) {
            this.x = x;
            this.y = y;
        }
    }

    public class TicTacToeTest extends StageTest<Clue> {
        public TicTacToeTest() throws Exception {
            super(Main.class);
        }

        static String[] inputs = new String[] {
            "1 1", "1 2", "1 3",
            "2 1", "2 2", "2 3",
            "3 1", "3 2", "3 3"
        };

        String iterateCells(String initial) {
            int index = -1;
            for (int i = 0; i < inputs.length; i++) {
                if (initial.equals(inputs[i])) {
                    index = i;
                    break;
                }
            }
            if (index == -1) {
                return "";
            }
            String fullInput = "";
            for (int i = index; i < index + 9; i++) {
                fullInput += inputs[i % inputs.length] + "\n";
            }
            return fullInput;
        }

        @Override
        public List<TestCase<Clue>> generate() {

            List<TestCase<Clue>> tests = new ArrayList<>();

            int i = 0;
            for (String input : inputs) {
                String fullMoveInput = iterateCells(input);

                String[] strNums = input.split(" ");
                int x = Integer.parseInt(strNums[0]);
                int y = Integer.parseInt(strNums[1]);

                if (i % 2 == 1) {
                    // mix with incorrect data
                    fullMoveInput = "4 " + i + "\n" + fullMoveInput;
                }

                String fullGameInput = "";
                for (int j = 0; j < 9; j++) {
                    fullGameInput += fullMoveInput;
                }

                String initial;
                if (i % 2 == 0) {
                    initial = "start user easy\n";
                } else {
                    initial = "start easy user\n";
                }

                fullGameInput = initial + fullGameInput + "exit";

                tests.add(new TestCase<Clue>()
                    .setInput(fullGameInput));

                i++;
            }

            tests.add(new TestCase<Clue>()
                .setInput("start easy easy\nexit"));

            tests.add(new TestCase<Clue>()
                .setInput("start user user\n" +
                    "1 1\n" +
                    "2 2\n" +
                    "1 2\n" +
                    "2 1\n" +
                    "1 3\n" +
                    "exit"));

            return tests;
        }

        @Override
        public CheckResult check(String reply, Clue clue) {

            List<TicTacToeField> fields = TicTacToeField.parseAll(reply);

            if (fields.size() == 0) {
                return new CheckResult(false, "No fields found");
            }

            for (int i = 1; i < fields.size(); i++) {
                TicTacToeField curr = fields.get(i - 1);
                TicTacToeField next = fields.get(i);

                if (!(curr.equalTo(next) || curr.hasNextAs(next))) {
                    return new CheckResult(false,
                        "For two fields following each " +
                            "other one is not a continuation " +
                            "of the other (they differ more than in two places).");
                }
            }

            return CheckResult.correct();
        }
    }
  learner_created: false
- name: src/tictactoe/Field.java
  visible: true
  text: |-
    package tictactoe;

    import java.util.Random;
    import java.util.Scanner;

    public class Field {
        private int xMoves;
        private int oMoves;
        private char[][] array;
        private Side side;

        Field () {
            this.xMoves = 0;
            this.oMoves = 0;
            this.side = Side.X;
            this.array = new char[3][3];
            for (int i = 0; i < this.array.length; i++) {
                for (int j = 0; j < this.array[i].length; j++) {
                    this.array[i][j] = ' ';
                }
            }
        }

        Field (String string) {
            this.xMoves = 0;
            this.oMoves = 0;
            this.side = Side.X;
            this.array = new char[3][3];
            int count = 0;
            String upperString = string.toUpperCase();
            for (int i = 0; i < array.length; i++) {
                for (int j = 0; j < array[i].length; j++) {
                    if (upperString.charAt(count) == '_') {
                        this.array[i][j] = ' ';
                    }   else {
                    this.array[i][j] = upperString.charAt(count);
                    }
                    count++;
                }
            }
        }

        public void playWithHuman () {
            printField();
            String result = "";
            do {
                move();
                result = gameResult();
                if (!result.equals("")) {
                    System.out.println(result);
                }
            } while (result.equals(""));
        }

        public void playWithAI () {
            printField();
            String result = "";
            do {
                if (side == Side.X) {
                    move();
                }   else {
                    AIEasyMove();
                }
                result = gameResult();
                if (!result.equals("")) {
                    System.out.println(result);
                }
            } while (result.equals(""));
        }

        public void printField() {

            System.out.println("---------");
            System.out.printf("| %s %s %s |\n", array[0][0], array[0][1], array[0][2]);
            System.out.printf("| %s %s %s |\n", array[1][0], array[1][1], array[1][2]);
            System.out.printf("| %s %s %s |\n", array[2][0], array[2][1], array[2][2]);
            System.out.println("---------");
        }

        private boolean isWin (char letter) {
            int winLines = 0;

            for (int i = 0; i < array.length; i++) {
                int count = 0;
                for (int j = 0; j < array[i].length; j++) {
                    if (array[i][j] == letter) {
                        count++;
                    }
                    if (j == 2 && count == 3)  {
                        winLines++;
                    }
                }
                count = 0;
            }

            for (int i = 0; i < array.length; i++) {
                int count = 0;
                for (int j = 0; j < array[i].length; j++) {
                    if (array[j][i] == letter) {
                        count++;
                    }
                    if (j == 2 && count == 3)  {
                        winLines++;
                    }
                }
                count = 0;
            }

            if (array[0][0] == letter && array [1][1] == letter && array[2][2] == letter) {
                winLines++;
            }
            if (array[0][2] == letter && array[1][1] == letter && array[2][0] == letter) {
                winLines++;
            }

            if (winLines == 1) {
                return true;
            }   else {
                return false;
            }
        }

        private String gameResult () {
            if (!isWin(side.X.getSymbol()) && !isWin(side.O.getSymbol()) && xMoves + oMoves == 9) {
                return "Draw";
            }   else if (isWin(side.X.getSymbol())) {
                return "X wins";
            }   else if (isWin(side.O.getSymbol())) {
                return "O wins";
            }   else return "";

        }

        private int[] inputCoordinates () {
            Scanner sc = new Scanner(System.in);
            int[] coordinates = new int[2];
            boolean legalInput = false;
            while (!legalInput) {
                try {
                    System.out.print("Enter the coordinates: ");
                    String[] xy = sc.nextLine().trim().split(" ");
                    coordinates[1] = Integer.parseInt(xy[0]);
                    coordinates[0] = Integer.parseInt(xy[1]);

                } catch (NumberFormatException e) {
                    System.out.println("You should enter numbers!");
                    continue;
                }

                if (coordinates[0] < 0 || coordinates[0] > 3 || coordinates[1] < 1 || coordinates[1] > 3) {
                    System.out.println("Coordinates should be from 1 to 3!");
                    continue;
                }
                if (coordinates[0] == 1) {
                    coordinates[0] = 2;
                } else if (coordinates[0] == 2) {
                    coordinates[0] = 1;
                } else if (coordinates[0] == 3) {
                    coordinates[0] = 0;
                }

                coordinates[1]--;
                legalInput = true;
            }
            return coordinates;
        }

        private void move () {
            boolean notEmpty = true;
            int[] coordinates;
            while (notEmpty) {
                coordinates = inputCoordinates();
                if (array[coordinates[0]][coordinates[1]] == ' ') {
                    if (side == Side.X) {
                        array[coordinates[0]][coordinates[1]] = 'X';
                        xMoves++;
                    } else {
                        array[coordinates[0]][coordinates[1]] = 'O';
                        oMoves++;
                    }
                    setSide();
                    printField();
                    notEmpty = false;
                } else {
                    System.out.println("This cell is occupied! Choose another one!");
                }
            }
        }

        private void AIEasyMove () {
            boolean notEmpty = true;
            while (notEmpty) {
                Random random = new Random();
                int xc = random.nextInt(3);
                int yc = random.nextInt(3);
                if (array[xc][yc] == ' ') {
                    array[xc][yc] = 'O';
                    oMoves++;
                    setSide();
                    System.out.println("Making move level \"easy\"");
                    printField();
                    notEmpty = false;
                } else {
                    continue;
                }
            }
        }

        private void setSide () {
            if (xMoves -oMoves == 0) {
                side = Side.X;
            }   else if (xMoves - oMoves == 1) {
                side = Side.O;
            }
        }
    }
  learner_created: true
- name: src/tictactoe/Side.java
  visible: true
  text: |
    package tictactoe;

    public enum Side {
        X('X'),
        O('O');

        private char symbol;
        private String wins;

        Side(char symbol) {
            this.symbol = symbol;
        }

        public char getSymbol() {
            return symbol;
        }
    }
  learner_created: true
- name: src/tictactoe/Player.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/81/stages/449/implement
status: Unchecked
record: -1
